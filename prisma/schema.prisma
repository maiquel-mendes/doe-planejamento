generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OperationalPlanning {
  id            String                 @id @default(cuid())
  status        String
  priority      String
  peculiarities String?
  createdById   String                 @map("created_by_id")
  responsibleId String                 @map("responsible_id")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  introduction  IntroductionSection?
  medicalPlan   MedicalPlan?
  createdBy     User                   @relation("CreatedPlannings", fields: [createdById], references: [id])
  responsible   User                   @relation("ResponsibleForPlannings", fields: [responsibleId], references: [id])
  assignments   PlanningAssignment[]
  scheduleItems PlanningScheduleItem[]
  targets       PlanningTarget[]

  @@map("operational_plannings")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    String
  isActive                Boolean               @default(true) @map("is_active")
  createdAt               DateTime              @default(now()) @map("created_at")
  createdPlannings        OperationalPlanning[] @relation("CreatedPlannings")
  responsibleForPlannings OperationalPlanning[] @relation("ResponsibleForPlannings")
  assignments             PlanningAssignment[]
  RefreshToken            RefreshToken[]

  @@map("users")
}

model OperationalFunction {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  category    String
  isActive    Boolean              @default(true) @map("is_active")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  assignments PlanningAssignment[] @relation // Add @relation for many-to-many

  @@map("operational_functions") // Add back the map
}

model Vehicle {
  id           String               @id @default(cuid())
  prefix       String               @unique
  type         String
  model        String
  capacity     Int
  isActive     Boolean              @default(true) @map("is_active")
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  medicalPlans MedicalPlan[]
  assignments  PlanningAssignment[]

  @@map("vehicles")
}

model Location {
  id                     String           @id @default(cuid())
  name                   String           @unique
  address                String?
  latitude               Float
  longitude              Float
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @updatedAt @map("updated_at")
  medicalPlansAsHospital MedicalPlan[]
  targets                PlanningTarget[]

  @@map("locations")
}

model IntroductionSection {
  id                 String              @id @default(cuid())
  serviceOrderNumber String              @map("service_order_number") @unique
  operationType      String              @map("operation_type")
  description        String
  supportUnit        String              @map("support_unit")
  mandateType        String              @map("mandate_type")
  operationDate      String              @map("operation_date")
  operationTime      String              @map("operation_time")
  planningId         String              @unique @map("planning_id")
  planning           OperationalPlanning @relation(fields: [planningId], references: [id])

  @@map("introduction_sections")
}

model PlanningTarget {
  id          String              @id @default(cuid())
  targetName  String              @map("target_name")
  description String?
  locationId  String              @map("location_id")
  planningId  String              @map("planning_id")
  location    Location            @relation(fields: [locationId], references: [id])
  planning    OperationalPlanning @relation(fields: [planningId], references: [id])

  @@map("planning_targets")
}

model PlanningAssignment {
  id            String              @id @default(cuid())
  planningId    String              @map("planning_id")
  userId        String              @map("user_id")
  vehicleId     String?             @map("vehicle_id")
  medicalPlanId String?             @map("medical_plan_id")
  functions     OperationalFunction[] // This is the new many-to-many relation
  medicalPlan   MedicalPlan?        @relation(fields: [medicalPlanId], references: [id])
  planning      OperationalPlanning @relation(fields: [planningId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
  vehicle       Vehicle?            @relation(fields: [vehicleId], references: [id])

  @@map("planning_assignments")
}

model PlanningScheduleItem {
  id          String              @id @default(cuid())
  time        DateTime
  activity    String
  responsible String
  planningId  String              @map("planning_id")
  planning    OperationalPlanning @relation(fields: [planningId], references: [id])

  @@map("planning_schedule_items")
}

model MedicalPlan {
  id                 String               @id @default(cuid())
  procedures         String
  planningId         String               @unique @map("planning_id")
  hospitalLocationId String               @map("hospital_location_id")
  ambulanceVehicleId String               @map("ambulance_vehicle_id")
  ambulanceVehicle   Vehicle              @relation(fields: [ambulanceVehicleId], references: [id])
  hospitalLocation   Location             @relation(fields: [hospitalLocationId], references: [id])
  planning           OperationalPlanning  @relation(fields: [planningId], references: [id])
  aphAssignments     PlanningAssignment[]

  @@map("medical_plans")
}

model RefreshToken {
  id          String   @id @default(cuid())
  hashedToken String   @unique @map("hashed_token")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  revoked     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
